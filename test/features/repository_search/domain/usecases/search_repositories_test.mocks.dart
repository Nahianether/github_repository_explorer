// Mocks generated by Mockito 5.4.5 from annotations
// in github_repository_explorer/test/features/repository_search/domain/usecases/search_repositories_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:github_repository_explorer/core/error/failures.dart' as _i5;
import 'package:github_repository_explorer/features/repository_search/domain/entities/search_result_entity.dart'
    as _i6;
import 'package:github_repository_explorer/features/repository_search/domain/repositories/repository_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRepository extends _i1.Mock
    implements _i3.RepositoryRepository {
  MockRepositoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.SearchResultEntity>> searchRepositories({
    required String? query,
    required int? page,
    required int? perPage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRepositories,
          [],
          {
            #query: query,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResultEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.SearchResultEntity>(
          this,
          Invocation.method(
            #searchRepositories,
            [],
            {
              #query: query,
              #page: page,
              #perPage: perPage,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResultEntity>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.SearchResultEntity>> refreshRepositories({
    required String? query,
    required int? page,
    required int? perPage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshRepositories,
          [],
          {
            #query: query,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResultEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.SearchResultEntity>(
          this,
          Invocation.method(
            #refreshRepositories,
            [],
            {
              #query: query,
              #page: page,
              #perPage: perPage,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.SearchResultEntity>>);
}
